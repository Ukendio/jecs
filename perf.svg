<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="192" onload="init(evt)" viewBox="0 0 1200 192" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<defs>
    <linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
        <stop stop-color="#eeeeee" offset="5%" />
        <stop stop-color="#eeeeb0" offset="95%" />
    </linearGradient>
</defs>
<style type="text/css">
    text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
    #search, #ignorecase { opacity:0.1; cursor:pointer; }
    #search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
    #subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
    #title { text-anchor:middle; font-size:17px}
    #unzoom { cursor:pointer; }
    #frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
    .hide { display:none; }
    .parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
    "use strict";
    var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
    function init(evt) {
        details = document.getElementById("details").firstChild;
        searchbtn = document.getElementById("search");
        ignorecaseBtn = document.getElementById("ignorecase");
        unzoombtn = document.getElementById("unzoom");
        matchedtxt = document.getElementById("matched");
        svg = document.getElementsByTagName("svg")[0];
        searching = 0;
        currentSearchTerm = null;
    }

    window.addEventListener("click", function(e) {
        var target = find_group(e.target);
        if (target) {
            if (target.nodeName == "a") {
                if (e.ctrlKey === false) return;
                e.preventDefault();
            }
            if (target.classList.contains("parent")) unzoom();
            zoom(target);
        }
        else if (e.target.id == "unzoom") unzoom();
        else if (e.target.id == "search") search_prompt();
        else if (e.target.id == "ignorecase") toggle_ignorecase();
    }, false)

    // mouse-over for info
    // show
    window.addEventListener("mouseover", function(e) {
        var target = find_group(e.target);
        if (target) details.nodeValue = g_to_text(target);
    }, false)

    // clear
    window.addEventListener("mouseout", function(e) {
        var target = find_group(e.target);
        if (target) details.nodeValue = ' ';
    }, false)

    // ctrl-F for search
    window.addEventListener("keydown",function (e) {
        if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
            e.preventDefault();
            search_prompt();
        }
    }, false)

    // ctrl-I to toggle case-sensitive search
    window.addEventListener("keydown",function (e) {
        if (e.ctrlKey && e.keyCode === 73) {
            e.preventDefault();
            toggle_ignorecase();
        }
    }, false)

    // functions
    function find_child(node, selector) {
        var children = node.querySelectorAll(selector);
        if (children.length) return children[0];
        return;
    }
    function find_group(node) {
        var parent = node.parentElement;
        if (!parent) return;
        if (parent.id == "frames") return node;
        return find_group(parent);
    }
    function orig_save(e, attr, val) {
        if (e.attributes["_orig_" + attr] != undefined) return;
        if (e.attributes[attr] == undefined) return;
        if (val == undefined) val = e.attributes[attr].value;
        e.setAttribute("_orig_" + attr, val);
    }
    function orig_load(e, attr) {
        if (e.attributes["_orig_"+attr] == undefined) return;
        e.attributes[attr].value = e.attributes["_orig_" + attr].value;
        e.removeAttribute("_orig_"+attr);
    }
    function g_to_text(e) {
        var text = find_child(e, "details").firstChild.nodeValue;
        return (text)
    }
    function g_to_func(e) {
        var child = find_child(e, "rawtext");
        return child ? child.textContent : null;
    }
    function update_text(e) {
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) -3;
        var txt = find_child(e, "rawtext").textContent.replace(/\([^(]*\)$/,"");
        t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

        // Smaller than this size won't fit anything
        if (w < 2 * 12 * 0.59) {
            t.textContent = "";
            return;
        }

        t.textContent = txt;
        // Fit in full text width
        if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
            return;

        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
        t.textContent = "";
    }

    // zoom
    function zoom_reset(e) {
        if (e.attributes != undefined) {
            orig_load(e, "x");
            orig_load(e, "width");
        }
        if (e.childNodes == undefined) return;
        for (var i = 0, c = e.childNodes; i < c.length; i++) {
            zoom_reset(c[i]);
        }
    }
    function zoom_child(e, x, ratio) {
        if (e.attributes != undefined) {
            if (e.attributes.x != undefined) {
                orig_save(e, "x");
                e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
                if (e.tagName == "text")
                    e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
            }
            if (e.attributes.width != undefined) {
                orig_save(e, "width");
                e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
            }
        }

        if (e.childNodes == undefined) return;
        for (var i = 0, c = e.childNodes; i < c.length; i++) {
            zoom_child(c[i], x - 10, ratio);
        }
    }
    function zoom_parent(e) {
        if (e.attributes) {
            if (e.attributes.x != undefined) {
                orig_save(e, "x");
                e.attributes.x.value = 10;
            }
            if (e.attributes.width != undefined) {
                orig_save(e, "width");
                e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
            }
        }
        if (e.childNodes == undefined) return;
        for (var i = 0, c = e.childNodes; i < c.length; i++) {
            zoom_parent(c[i]);
        }
    }
    function zoom(node) {
        var attr = find_child(node, "rect").attributes;
        var width = parseFloat(attr.width.value);
        var xmin = parseFloat(attr.x.value);
        var xmax = parseFloat(xmin + width);
        var ymin = parseFloat(attr.y.value);
        var ratio = (svg.width.baseVal.value - 2 * 10) / width;

        // XXX: Workaround for JavaScript float issues (fix me)
        var fudge = 0.0001;

        unzoombtn.classList.remove("hide");

        var el = document.getElementById("frames").children;
        for (var i = 0; i < el.length; i++) {
            var e = el[i];
            var a = find_child(e, "rect").attributes;
            var ex = parseFloat(a.x.value);
            var ew = parseFloat(a.width.value);
            var upstack;
            // Is it an ancestor
            if (1 == 1) {
                upstack = parseFloat(a.y.value) > ymin;
            } else {
                upstack = parseFloat(a.y.value) < ymin;
            }
            if (upstack) {
                // Direct ancestor
                if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                    e.classList.add("parent");
                    zoom_parent(e);
                    update_text(e);
                }
                // not in current path
                else
                    e.classList.add("hide");
            }
            // Children maybe
            else {
                // no common path
                if (ex < xmin || ex + fudge >= xmax) {
                    e.classList.add("hide");
                }
                else {
                    zoom_child(e, xmin, ratio);
                    update_text(e);
                }
            }
        }
        search();
    }
    function unzoom() {
        unzoombtn.classList.add("hide");
        var el = document.getElementById("frames").children;
        for(var i = 0; i < el.length; i++) {
            el[i].classList.remove("parent");
            el[i].classList.remove("hide");
            zoom_reset(el[i]);
            update_text(el[i]);
        }
        search();
    }

    // search
    function toggle_ignorecase() {
        ignorecase = !ignorecase;
        if (ignorecase) {
            ignorecaseBtn.classList.add("show");
        } else {
            ignorecaseBtn.classList.remove("show");
        }
        reset_search();
        search();
    }
    function reset_search() {
        var el = document.querySelectorAll("#frames rect");
        for (var i = 0; i < el.length; i++) {
            orig_load(el[i], "fill")
        }
    }
    function search_prompt() {
        if (!searching) {
            var term = prompt("Enter a search term (regexp " +
                "allowed, eg: ^ext4_)"
                + (ignorecase ? ", ignoring case" : "")
                + "\nPress Ctrl-i to toggle case sensitivity", "");
            if (term != null) {
                currentSearchTerm = term;
                search();
            }
        } else {
            reset_search();
            searching = 0;
            currentSearchTerm = null;
            searchbtn.classList.remove("show");
            searchbtn.firstChild.nodeValue = "Search"
            matchedtxt.classList.add("hide");
            matchedtxt.firstChild.nodeValue = ""
        }
    }
    function search(term) {
        if (currentSearchTerm === null) return;
        var term = currentSearchTerm;

        var re = new RegExp(term, ignorecase ? 'i' : '');
        var el = document.getElementById("frames").children;
        var matches = new Object();
        var maxwidth = 0;
        for (var i = 0; i < el.length; i++) {
            var e = el[i];
            var func = g_to_func(e);
            var rect = find_child(e, "rect");
            if (func == null || rect == null)
                continue;

            // Save max width. Only works as we have a root frame
            var w = parseFloat(rect.attributes.width.value);
            if (w > maxwidth)
                maxwidth = w;

            if (func.match(re)) {
                // highlight
                var x = parseFloat(rect.attributes.x.value);
                orig_save(rect, "fill");
                rect.attributes.fill.value = "rgb(230,0,230)";

                // remember matches
                if (matches[x] == undefined) {
                    matches[x] = w;
                } else {
                    if (w > matches[x]) {
                        // overwrite with parent
                        matches[x] = w;
                    }
                }
                searching = 1;
            }
        }
        if (!searching)
            return;

        searchbtn.classList.add("show");
        searchbtn.firstChild.nodeValue = "Reset Search";

        // calculate percent matched, excluding vertical overlap
        var count = 0;
        var lastx = -1;
        var lastw = 0;
        var keys = Array();
        for (k in matches) {
            if (matches.hasOwnProperty(k))
                keys.push(k);
        }
        // sort the matched frames by their x location
        // ascending, then width descending
        keys.sort(function(a, b){
            return a - b;
        });
        // Step through frames saving only the biggest bottom-up frames
        // thanks to the sort order. This relies on the tree property
        // where children are always smaller than their parents.
        var fudge = 0.0001; // JavaScript floating point
        for (var k in keys) {
            var x = parseFloat(keys[k]);
            var w = matches[keys[k]];
            if (x >= lastx + lastw - fudge) {
                count += w;
                lastx = x;
                lastw = w;
            }
        }
        // display matched percent
        matchedtxt.classList.remove("hide");
        var pct = 100 * count / maxwidth;
        if (pct != 100) pct = pct.toFixed(1)
        matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
    }
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="192.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="179" > </text>
<text id="details" x="10.00" y="179" > </text>
<g id="frames">

<g>
<title></title>
<details>Function:  [:0] (86,990 usec, 100.0%); self: 0 usec</details>
<rect x='10.0' y='144' width='1180.0' height='15' fill='rgb(250,211,50)' rx='2' ry='2' />
<text x='13.0' y='154.5'></text>
<rawtext></rawtext>
</g>
<g>
<title>
./benches/ecsgame.luau:1</title>
<details>Function:  [./benches/ecsgame.luau:1] (59,386 usec, 68.3%); self: 900 usec</details>
<rect x='10.0' y='128' width='805.5578802161168' height='15' fill='rgb(245,226,25)' rx='2' ry='2' />
<text x='13.0' y='138.5'></text>
<rawtext></rawtext>
</g>
<g>
<title>
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1</title>
<details>Function:  [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1] (27,604 usec, 31.7%); self: 27,604 usec</details>
<rect x='815.5578802161168' y='128' width='374.4421197838832' height='15' fill='rgb(224,152,32)' rx='2' ry='2' />
<text x='818.5578802161168' y='138.5'></text>
<rawtext></rawtext>
</g>
<g>
<title>update
./benches/ecsgame.luau:117</title>
<details>Function: update [./benches/ecsgame.luau:117] (55,932 usec, 64.3%); self: 48,036 usec</details>
<rect x='10.0' y='112' width='758.7051385216693' height='15' fill='rgb(230,186,52)' rx='2' ry='2' />
<text x='13.0' y='122.5'>update</text>
<rawtext>update</rawtext>
</g>
<g>
<title>entity_create
./benches/ecsgame.luau:83</title>
<details>Function: entity_create [./benches/ecsgame.luau:83] (1,800 usec, 2.1%); self: 0 usec</details>
<rect x='768.7051385216693' y='112' width='24.416599609150477' height='15' fill='rgb(241,106,33)' rx='2' ry='2' />
<text x='771.7051385216693' y='122.5'>e..</text>
<rawtext>entity_create</rawtext>
</g>
<g>
<title>world_new
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2206</title>
<details>Function: world_new [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2206] (100 usec, 0.1%); self: 0 usec</details>
<rect x='801.9931026554776' y='112' width='1.3564777560639154' height='15' fill='rgb(254,140,1)' rx='2' ry='2' />
<text x='804.9931026554776' y='122.5'></text>
<rawtext>world_new</rawtext>
</g>
<g>
<title>require</title>
<details>Function: require [[C]:0] (654 usec, 0.8%); self: 654 usec</details>
<rect x='793.1217381308196' y='112' width='8.871364524658008' height='15' fill='rgb(215,11,48)' rx='2' ry='2' />
<text x='796.1217381308196' y='122.5'></text>
<rawtext>require</rawtext>
</g>
<g>
<title>entity_create
./benches/ecsgame.luau:83</title>
<details>Function: entity_create [./benches/ecsgame.luau:83] (4,195 usec, 4.8%); self: 100 usec</details>
<rect x='10.0' y='96' width='56.90424186688125' height='15' fill='rgb(241,106,33)' rx='2' ry='2' />
<text x='13.0' y='106.5'>entity..</text>
<rawtext>entity_create</rawtext>
</g>
<g>
<title>world_query_iter_next
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1747</title>
<details>Function: world_query_iter_next [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1747] (300 usec, 0.3%); self: 300 usec</details>
<rect x='107.61213932635935' y='96' width='4.069433268191746' height='15' fill='rgb(223,177,38)' rx='2' ry='2' />
<text x='110.61213932635935' y='106.5'></text>
<rawtext>world_query_iter_next</rawtext>
</g>
<g>
<title>world_set
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2399</title>
<details>Function: world_set [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2399] (400 usec, 0.5%); self: 400 usec</details>
<rect x='96.76031727784802' y='96' width='5.425911024255662' height='15' fill='rgb(254,21,5)' rx='2' ry='2' />
<text x='99.76031727784802' y='106.5'></text>
<rawtext>world_set</rawtext>
</g>
<g>
<title>world_query_iter_next
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1798</title>
<details>Function: world_query_iter_next [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1798] (400 usec, 0.5%); self: 400 usec</details>
<rect x='102.18622830210369' y='96' width='5.425911024255662' height='15' fill='rgb(230,200,34)' rx='2' ry='2' />
<text x='105.18622830210369' y='106.5'></text>
<rawtext>world_query_iter_next</rawtext>
</g>
<g>
<title>query_archetypes
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1163</title>
<details>Function: query_archetypes [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1163] (100 usec, 0.1%); self: 100 usec</details>
<rect x='115.75100586274284' y='96' width='1.3564777560639154' height='15' fill='rgb(245,34,30)' rx='2' ry='2' />
<text x='118.75100586274284' y='106.5'></text>
<rawtext>query_archetypes</rawtext>
</g>
<g>
<title>world_delete
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2920</title>
<details>Function: world_delete [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2920] (2,201 usec, 2.5%); self: 1,900 usec</details>
<rect x='66.90424186688125' y='96' width='29.856075410966778' height='15' fill='rgb(206,206,7)' rx='2' ry='2' />
<text x='69.90424186688125' y='106.5'>wo..</text>
<rawtext>world_delete</rawtext>
</g>
<g>
<title>cached_query_iter
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1667</title>
<details>Function: cached_query_iter [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1667] (300 usec, 0.3%); self: 300 usec</details>
<rect x='111.6815725945511' y='96' width='4.069433268191746' height='15' fill='rgb(217,4,23)' rx='2' ry='2' />
<text x='114.6815725945511' y='106.5'></text>
<rawtext>cached_query_iter</rawtext>
</g>
<g>
<title>setup_player
./benches/ecsgame.luau:20</title>
<details>Function: setup_player [./benches/ecsgame.luau:20] (100 usec, 0.1%); self: 0 usec</details>
<rect x='790.4087826186918' y='96' width='1.3564777560639154' height='15' fill='rgb(214,78,39)' rx='2' ry='2' />
<text x='793.4087826186918' y='106.5'></text>
<rawtext>setup_player</rawtext>
</g>
<g>
<title>world_entity
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2825</title>
<details>Function: world_entity [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2825] (400 usec, 0.5%); self: 100 usec</details>
<rect x='784.9828715944361' y='96' width='5.425911024255662' height='15' fill='rgb(231,182,30)' rx='2' ry='2' />
<text x='787.9828715944361' y='106.5'></text>
<rawtext>world_entity</rawtext>
</g>
<g>
<title>setup_goblin
./benches/ecsgame.luau:42</title>
<details>Function: setup_goblin [./benches/ecsgame.luau:42] (100 usec, 0.1%); self: 0 usec</details>
<rect x='791.7652603747557' y='96' width='1.3564777560639154' height='15' fill='rgb(222,70,48)' rx='2' ry='2' />
<text x='794.7652603747557' y='106.5'></text>
<rawtext>setup_goblin</rawtext>
</g>
<g>
<title>setup_wood_spikes
./benches/ecsgame.luau:65</title>
<details>Function: setup_wood_spikes [./benches/ecsgame.luau:65] (1,200 usec, 1.4%); self: 200 usec</details>
<rect x='768.7051385216693' y='96' width='16.277733072766985' height='15' fill='rgb(239,186,21)' rx='2' ry='2' />
<text x='771.7051385216693' y='106.5'></text>
<rawtext>setup_wood_spikes</rawtext>
</g>
<g>
<title>world_add
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2501</title>
<details>Function: world_add [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2501] (100 usec, 0.1%); self: 100 usec</details>
<rect x='801.9931026554776' y='96' width='1.3564777560639154' height='15' fill='rgb(242,210,13)' rx='2' ry='2' />
<text x='804.9931026554776' y='106.5'></text>
<rawtext>world_add</rawtext>
</g>
<g>
<title>setup_goblin
./benches/ecsgame.luau:42</title>
<details>Function: setup_goblin [./benches/ecsgame.luau:42] (2,563 usec, 2.9%); self: 400 usec</details>
<rect x='10.0' y='80' width='34.76652488791815' height='15' fill='rgb(222,70,48)' rx='2' ry='2' />
<text x='13.0' y='90.5'>se..</text>
<rawtext>setup_goblin</rawtext>
</g>
<g>
<title>world_entity
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2825</title>
<details>Function: world_entity [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2825] (102 usec, 0.1%); self: 102 usec</details>
<rect x='64.16415679963214' y='80' width='1.3836073111851936' height='15' fill='rgb(231,182,30)' rx='2' ry='2' />
<text x='67.16415679963214' y='90.5'></text>
<rawtext>world_entity</rawtext>
</g>
<g>
<title>setup_player
./benches/ecsgame.luau:20</title>
<details>Function: setup_player [./benches/ecsgame.luau:20] (1,430 usec, 1.6%); self: 100 usec</details>
<rect x='44.76652488791815' y='80' width='19.39763191171399' height='15' fill='rgb(214,78,39)' rx='2' ry='2' />
<text x='47.76652488791815' y='90.5'></text>
<rawtext>setup_player</rawtext>
</g>
<g>
<title>archetype_delete
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1095</title>
<details>Function: archetype_delete [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:1095] (301 usec, 0.3%); self: 301 usec</details>
<rect x='66.90424186688125' y='80' width='4.082998045752386' height='15' fill='rgb(253,214,43)' rx='2' ry='2' />
<text x='69.90424186688125' y='90.5'></text>
<rawtext>archetype_delete</rawtext>
</g>
<g>
<title>ecs_bulk_insert
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080</title>
<details>Function: ecs_bulk_insert [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080] (100 usec, 0.1%); self: 100 usec</details>
<rect x='790.4087826186918' y='80' width='1.3564777560639154' height='15' fill='rgb(235,105,37)' rx='2' ry='2' />
<text x='793.4087826186918' y='90.5'></text>
<rawtext>ecs_bulk_insert</rawtext>
</g>
<g>
<title>entity_index_new_id
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2254</title>
<details>Function: entity_index_new_id [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2254] (300 usec, 0.3%); self: 100 usec</details>
<rect x='784.9828715944361' y='80' width='4.069433268191746' height='15' fill='rgb(217,39,3)' rx='2' ry='2' />
<text x='787.9828715944361' y='90.5'></text>
<rawtext>entity_index_new_id</rawtext>
</g>
<g>
<title>ecs_bulk_insert
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080</title>
<details>Function: ecs_bulk_insert [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080] (100 usec, 0.1%); self: 100 usec</details>
<rect x='791.7652603747557' y='80' width='1.3564777560639154' height='15' fill='rgb(235,105,37)' rx='2' ry='2' />
<text x='794.7652603747557' y='90.5'></text>
<rawtext>ecs_bulk_insert</rawtext>
</g>
<g>
<title>ecs_bulk_insert
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080</title>
<details>Function: ecs_bulk_insert [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080] (1,000 usec, 1.1%); self: 900 usec</details>
<rect x='768.7051385216693' y='80' width='13.564777560639154' height='15' fill='rgb(235,105,37)' rx='2' ry='2' />
<text x='771.7051385216693' y='90.5'></text>
<rawtext>ecs_bulk_insert</rawtext>
</g>
<g>
<title>ecs_bulk_insert
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080</title>
<details>Function: ecs_bulk_insert [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080] (2,063 usec, 2.4%); self: 2,063 usec</details>
<rect x='10.0' y='64' width='27.984136107598577' height='15' fill='rgb(235,105,37)' rx='2' ry='2' />
<text x='13.0' y='74.5'>e..</text>
<rawtext>ecs_bulk_insert</rawtext>
</g>
<g>
<title>GC</title>
<details>Function: GC [GC:0] (100 usec, 0.1%); self: 100 usec</details>
<rect x='37.98413610759857' y='64' width='1.3564777560639154' height='15' fill='rgb(226,66,24)' rx='2' ry='2' />
<text x='40.98413610759857' y='74.5'></text>
<rawtext>GC</rawtext>
</g>
<g>
<title>ecs_bulk_insert
C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080</title>
<details>Function: ecs_bulk_insert [C:/Users/Marcus/Documents/packages/jecs/jecs.luau:2080] (1,230 usec, 1.4%); self: 1,130 usec</details>
<rect x='44.76652488791815' y='64' width='16.68467639958616' height='15' fill='rgb(235,105,37)' rx='2' ry='2' />
<text x='47.76652488791815' y='74.5'></text>
<rawtext>ecs_bulk_insert</rawtext>
</g>
<g>
<title>GC</title>
<details>Function: GC [GC:0] (100 usec, 0.1%); self: 100 usec</details>
<rect x='61.45120128750431' y='64' width='1.3564777560639154' height='15' fill='rgb(226,66,24)' rx='2' ry='2' />
<text x='64.45120128750432' y='74.5'></text>
<rawtext>GC</rawtext>
</g>
<g>
<title>GC</title>
<details>Function: GC [GC:0] (200 usec, 0.2%); self: 200 usec</details>
<rect x='784.9828715944361' y='64' width='2.712955512127831' height='15' fill='rgb(226,66,24)' rx='2' ry='2' />
<text x='787.9828715944361' y='74.5'></text>
<rawtext>GC</rawtext>
</g>
<g>
<title>concat</title>
<details>Function: concat [[C]:0] (100 usec, 0.1%); self: 0 usec</details>
<rect x='768.7051385216693' y='64' width='1.3564777560639154' height='15' fill='rgb(205,188,26)' rx='2' ry='2' />
<text x='771.7051385216693' y='74.5'></text>
<rawtext>concat</rawtext>
</g>
<g>
<title>concat</title>
<details>Function: concat [[C]:0] (100 usec, 0.1%); self: 0 usec</details>
<rect x='44.76652488791815' y='48' width='1.3564777560639154' height='15' fill='rgb(205,188,26)' rx='2' ry='2' />
<text x='47.76652488791815' y='58.5'></text>
<rawtext>concat</rawtext>
</g>
<g>
<title>GC</title>
<details>Function: GC [GC:0] (100 usec, 0.1%); self: 100 usec</details>
<rect x='768.7051385216693' y='48' width='1.3564777560639154' height='15' fill='rgb(226,66,24)' rx='2' ry='2' />
<text x='771.7051385216693' y='58.5'></text>
<rawtext>GC</rawtext>
</g>
<g>
<title>GC</title>
<details>Function: GC [GC:0] (100 usec, 0.1%); self: 100 usec</details>
<rect x='44.76652488791815' y='32' width='1.3564777560639154' height='15' fill='rgb(226,66,24)' rx='2' ry='2' />
<text x='47.76652488791815' y='42.5'></text>
<rawtext>GC</rawtext>
</g>
</g>
</svg>

